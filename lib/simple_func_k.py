"""generated by kpl 171011"""

import numpy as np
import hashlib
import pickle
import glob
import random
from scipy import interpolate


def intersection(lista, listb):
    return list(set(lista).intersection(set(listb)))

def union(lista,listb):
    return list(set(lista).union(set(listb)))

def difference(lista, listb):
    return list(set(lista).difference(set(listb)))


def Average(list):
    sum =0 
    for item in list:
        sum = sum + item
    return sum/len(list)

def interpolateline(x,y, kind = 'quadratic', npoint = 500):
    xmin = min(x)
    xmax = max(x)
    func = interpolate.interp1d(x, y, kind=kind)
    xnew = np.linspace(xmin,xmax,npoint)
    ynew = func(xnew)
    return xnew,ynew


def Gaussian1D (datain):
    x, ux, sx = datain
    dx = np.square(np.true_divide(x-ux,sx))
    return np.exp(-0.5*dx)

#def Gaussian2D (datain,alpha= 0.5, height =1):
def Gaussian2D (datain):
    x, y, ux, uy, sx, sy, alpha, height = datain
    dx = np.square(np.true_divide(x-ux,sx))
    dy = np.square(np.true_divide(y-uy,sy))
    return height*np.exp(-alpha*(dx+dy))

def mylog(x, ):
    if x > 0.0: return -np.log(x)
    else:       return 10000.0


def readblock(lines):
    dict = {}
    for line in lines:
        try:
            dict[line[0]]= float(line[1])
            if dict[line[0]].is_integer():
                dict[line[0]]=int(dict[line[0]])
        except:
            dict[line[0]]= line[1]
    return dict


def merge_dicts(dict_args):
    """
    Given any number of dicts, shallow copy and merge into a new dict,
    precedence goes to key value pairs in latter dicts.
    """
    result = {}
    for dictionary in dict_args:
        result.update(dictionary)
    return result

def Shuffle_listlike(input,out):
    length = len(input)
    _l = range(length)

    print _l
    for i in range(100):  random.shuffle(_l)
    print _l
    for index in _l:
        out.append(input[index])

    return out

def checkzero(x):
    if abs(x) < 1e-15:
        return 0.0
    else :
        return x

def tuplesum(a,b):
    """ sum of two tuple by mapping of element to element"""
    return [_x+_y for (_x,_y) in zip(a,b)]

def glueList(l, type, sep='None', format=False):
    if len(l) == 0 : return ''
    if sep=='None': sep='   '

    if not format:
        if   type == 'int': format = '%d%s'
        elif type == 'dp' : format = '%f%s'
        elif type == 'str': format = '%s%s'
    else:
        format += '%s'

    if len(l) > 1:
        s = [format%(item,sep) for item in l[:-1]] + [format%(l[-1],'')]
    else:
        s = l

    return reduce(lambda a,b:a+b, s)

def hashlist(list,dim =1000000):
    #print list
    string = ''
    for i in list:
        string = string +str(i)

    #print string
    md5 =hashlib.md5()

    #print md5.digest_size
    #print md5.block_size
    md5.update(string)
    #print md5.digest
    #print string

    #return md5.hexdigest()
    _tmp= md5.hexdigest()
    return int((int(_tmp,16))%dim)

def Dumppkl(pklfilename,result):
    outputfile=open(pklfilename,'wb')
    pickle.dump(result,outputfile)
    outputfile.close()
    return

def Loadpkl(pklfilename):
    inputfile = open(pklfilename,'rb')
    result = pickle.load(inputfile)
    inputfile.close()
    return result
    
def CheckFile(filelist):
    lready  = 1
    for name in filelist:
        if not glob.glob(name):
            print ('%s not found' %name)
            lready = 0

    return lready
        


if __name__ == "__main__":
    a = [1,2,3]
    b =[2,3,4]
    print intersection(a,b)
    print union(a,b)
    print difference(a,b)

    c=[2,3,4]
    print difference(b,c)
    if(not difference(b,c)) : print 'test'

